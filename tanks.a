;; -*- asm -*-

!source "macros.a"

!zone BASIC {
    * = $1c01

    !wo  .EndOfText             ; Pointer to end of text
    !wo  $000a                  ; Line number 10
    !pet $9e, "4864", $00       ; SYS4864\0
    !by  $00, $00               ; End of Text Token
.EndOfText:
}

!addr {
!zone SystemVarsAndRegisters {
    IRQHandlerPtr   = $0314
    IRQHandlerPtrHi = $0315

    CustomChars   = $2000
    Character_ROM = $d000

    SpritePtrStart   = $07f8
    SpriteColorStart = $d027
    SpritePosStart   = $d000
    SpriteXMSB       = $d010

    Joystick2     = $dc00
    Joystick1     = $dc01

    TextStart     = $0400
    SpriteEn      = $d015
    BgColor       = $D021
    BorderColor   = $D020

    MMU_Control   = $ff00

    VIC_Raster      = $d012
    VIC_Interrupt   = $d019
    VIC_SpSpCollide = $d01e
    VIC_Keyboard    = $d02f
}
}

!zone Init {
    * = $1300

Init:
    cld

    ;; Disable BASIC IRQs
    lda #$ff
    sta $d8
    sta $12fd

    ;; Disable BASIC, leave I/O, Kernal, and Character ROMs
    lda #$00
    sta MMU_Control

    jsr ClearTextScreen
    jsr FadeToBlack

    jmp GameLoop
}

!zone GameLoop {
GameLoop:
    jmp GameLoop
}

!zone FadeToBlack {
.border: !by 15, 12, 11, 0
.backgd: !by 13, 15, 11,  0

FadeToBlack:
    ldx #$00
.loop:
    lda .border, x
    sta BgColor
    lda .backgd, x
    sta BorderColor
    beq +

    ldy #100
    jsr BusyDelay
    inx

    jmp .loop
+

    rts
}

!zone ClearTextScreen {
ClearTextScreen:
    ldx #$00

!macro .SetToMaxChar .address {
    lda .address, x
    cmp #$20
    beq +

    lda #127
    sta .address, x
+
}

.loop:
    +.SetToMaxChar TextStart
    +.SetToMaxChar TextStart + $100
    +.SetToMaxChar TextStart + $200
    +.SetToMaxChar TextStart + $300
    inx
    bne .loop

!macro .DecToZero .address {
    lda .address, x
    cmp #$20
    beq +
    dec .address, x
+
}

    ldy #128
.dec_loop:
    +.DecToZero TextStart
    +.DecToZero TextStart + $100
    +.DecToZero TextStart + $200
    +.DecToZero TextStart + $300
    inx
    bne .dec_loop
    dey
    bne .dec_loop
    rts
}

;;; BusyDelay
;;; Y - number of times to wait
!zone BusyDelay {
BusyDelay:
    +SaveRegisters
    ldx #$00

.loop:
    inx
    bne .loop
    dey
    bne .loop

    +RestoreRegisters

    rts
}
