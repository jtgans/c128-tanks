;; -*- asm -*-

!source "macros.a"
!source "sprites.a"

!zone BASIC {
    * = $1c01

    !wo  .EndOfText             ; Pointer to end of text
    !wo  $000a                  ; Line number 10
    !pet $9e, "4864", $00       ; SYS4864\0
    !by  $00, $00               ; End of Text Token
.EndOfText:
}

!addr {
!zone SystemVarsAndRegisters {
    IRQHandlerPtr   = $0314
    IRQHandlerPtrHi = $0315

    CustomChars   = $2000
    Character_ROM = $d000

    SpritePtrStart   = $07f8
    SpriteColorStart = $d027
    SpritePosStart   = $d000
    SpriteXMSB       = $d010

    Joystick2     = $dc00
    Joystick1     = $dc01

    TextStart     = $0400
    SpriteEn      = $d015
    BgColor       = $D021
    BorderColor   = $D020

    MMU_Control   = $ff00

    VIC_Raster      = $d012
    VIC_Interrupt   = $d019
    VIC_SpSpCollide = $d01e
    VIC_Keyboard    = $d02f
}
}

!zone Init {
    * = $1300

!macro .InitSprite .spriteno, .shapePtr, .facing, .color, .x, .y {
    ;; Set sprite shape
    lda #.shapePtr / 64
    sta SpritePtrStart + .spriteno

    ;; Set sprite color
    lda #.color
    sta SpriteColorStart + .spriteno

    ;; Set sprite position -- stride is 2, hence the multiply
    ldx #.x
    stx ShadowSpritePos + (.spriteno * 2)
    ldy #.y
    sty ShadowSpritePos + (.spriteno * 2) + 1

    ;; Set facing direction
    lda #.facing
    sta SpriteFacing + .spriteno
}

Init:
    cld

    ;; Disable BASIC IRQs
    lda #$ff
    sta $d8
    sta $12fd

    ;; Disable BASIC, leave I/O, Kernal, and Character ROMs
    lda #$00
    sta MMU_Control

    jsr ClearTextScreen
    jsr FadeToBlack

    +.InitSprite 0, TankDown, DirDown, Color_Red,    0, 0
    +.InitSprite 1, TankUp,   DirUp,   Color_LtBlue, 148, 179
!for i, 2, 7 {
    +.InitSprite i, Bullet,   0,       Color_Black,  0, (i - 2) * 10
}

    ;; Enable all sprites by default
    lda #$ff
    sta SpriteEn

    jmp GameLoop
}

!zone GameLoop {
GameLoop:

FrameStart:
    jsr UpdateSpritePositions

    jmp GameLoop
}

!zone UpdateSpritePositions {
UpdateSpritePositions:
    ;; Prep stack for MSB bits
    lda #$00
    pha

    ;; Start from 255 (-1) since we increment first in the loop
    ldx #$ff

.updateNextSprite:
    ;; Update X first
    inx
    lda ShadowSpritePos, x
    clc
    adc #24 / 2                 ; playfield starts at X=24
    asl                         ; shift MSB to carry
    sta SpritePosStart, x

    ;; Store the MSB in the stack for later
    pla
    ror
    pha

    ;; Update Y next
    inx
    lda ShadowSpritePos, x
    clc
    adc #50                     ; playfield starts at Y=50
    sta SpritePosStart, x

    ;; On to the next pair
    cpx #$0f                    ; 16 bytes to update
    bne .updateNextSprite

    ;; Update the MSB
    pla
    sta SpriteXMSB

    rts
}

!zone FadeToBlack {
.border: !by 15, 12, 11, 0
.backgd: !by 13, 15, 11,  0

FadeToBlack:
    ldx #$00
.loop:
    lda .border, x
    sta BgColor
    lda .backgd, x
    sta BorderColor
    beq +

    ldy #100
    jsr BusyDelay
    inx

    jmp .loop
+

    rts
}

!zone ClearTextScreen {
ClearTextScreen:
    ldx #$00

!macro .SetToMaxChar .address {
    lda .address, x
    cmp #$20
    beq +

    lda #127
    sta .address, x
+
}

.loop:
    +.SetToMaxChar TextStart
    +.SetToMaxChar TextStart + $100
    +.SetToMaxChar TextStart + $200
    +.SetToMaxChar TextStart + $300
    inx
    bne .loop

!macro .DecToZero .address {
    lda .address, x
    cmp #$20
    beq +
    dec .address, x
+
}

    ldy #128
.dec_loop:
    +.DecToZero TextStart
    +.DecToZero TextStart + $100
    +.DecToZero TextStart + $200
    +.DecToZero TextStart + $300
    inx
    bne .dec_loop
    dey
    bne .dec_loop
    rts
}

;;; BusyDelay
;;; Y - number of times to wait
!zone BusyDelay {
BusyDelay:
    +SaveRegisters
    ldx #$00

.loop:
    inx
    bne .loop
    dey
    bne .loop

    +RestoreRegisters

    rts
}

!zone Globals {
;;; Tracks the direction the sprite last moved in. Zero means it is dead.
SpriteFacing:   !fill 16, $00
SpriteFacingEnd:

;;; Direction flags
DirUp           = %.......1
DirDown         = %......1.
DirLeft         = %.....1..
DirRight        = %....1...

;;; Shadow X/Y positions for sprites -- 255 max positions horizontally.
ShadowSpritePos:     !fill 16, $00
ShadowSpritePosEnd:

;;; Max visible coordinates
MaxXCoord = 148
MaxYCoord = 179
}
